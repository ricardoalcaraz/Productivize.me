version: "3.7"
services:
  cache:
    image: redis:buster
    container_name: cache
    networks:
      - backend
    command: redis-server
  authentication_microservice:
    container_name: authentication
    image: authentication
    volumes:
      - logs:${LOG_PATH}
    networks:
      - frontend
      - backend
    depends_on: 
      - cache
    environment:
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - CACHE_URL=${CACHE_URL}
      - LOG_PATH=${LOG_PATH}
      - PORT=3003
  habits_microservice:
    container_name: habits
    image: habits
    volumes:
      - logs:${LOG_PATH}
    networks:
      - frontend
      - backend
    depends_on:
      - db
      - cache
    environment:
      - CACHE_URL=${CACHE_URL}
      - DATABASE_URL=${DATABASE_URL}
      - PORT=3001
  users_microservice:
    container_name: users
    image: users
    volumes:
      - logs:/logs
    networks:
      - frontend
      - backend
    depends_on:
      - db
      - cache
    environment:
      - CACHE_URL=${CACHE_URL}
      - DATABASE_URL=${DATABASE_URL}
      - LOG_PATH=${LOG_PATH}
      - PORT=3002
  db:
      container_name: postgres
      image: postgres
      volumes:
        - db-data:/var/lib/postgresql/data
      networks:
        - backend
      environment:
        - PG_MODE=${PG_MODE}
        - PG_PRIMARY_USER=${PG_PRIMARY_USER}
        - PG_PRIMARY_PASSWORD=${PG_PRIMARY_PASSWORD}
        - PG_DATABASE=${PG_DATABASE}
        - PG_USER=${PG_USER}
        - PG_PASSWORD=${PG_PASSWORD}
        - PG_ROOT_PASSWORD=${PG_ROOT_PASSWORD}
      build: 
          context: Postgres/
  db-admin:
      container_name: pgadmin
      image: dpage/pgadmin4
      ports:
        - "5050:80"
      volumes:
        - db-admin:/pgdata
      networks:
        - backend
      environment:
        - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
        - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
  server:
      container_name: nginx
      image: nginx
      ports:
        - "37101:80"
      networks: 
        - frontend
      build:
          context: .
          dockerfile: nginx/DOCKERFILE
      depends_on:
        - habits_microservice
        - users_microservice

networks:
    backend:
        driver: bridge
    frontend:
        driver: bridge
    
volumes:
    db-data:
    db-admin:
    redis-cache:
    logs: